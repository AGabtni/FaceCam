/**
 * This file must contain a single class definition. The file will be automatically
 * included in all the webpages that use this widget if: (a) there is at least
 * one class method that has some code in it (excluding comments), or (b) there is 
 * another widget class (in the same webpage) that extends from this class.
 */
class member2__BootstrapSearchBar extends __Widget {
    /**
     * If this method is defined and has some code, a call to it will be added 
     * by Widget.php to initialize this JS class. It is called from the 
     * HTML page's "document ready" code generated by getOnReadyCode() 
     * in Widget.php. It is called only once per HTML page.
     */
    static initClass() {
        // Note: It's okay to call "this" and "super" from static methods when needed.
        // For example:
        // super.initClass();
        // this.classSettings = {};
        // console.log('The class is ready');
    }

    /**
     * If this method is defined and has some code, a call to it will be added
     * by the initJavaScriptWidget() method in Widget.php, which is usually  
     * called from the widget's PHP render() method. 
     * 
     * This method is expected to set or modify the markup of the widget
     * based on the given user parameters. The widget's DOM container can 
     * be accessed via "this.holder".
     * 
     * @param params The user options given to the server-side widget.
     */
    render(params) {
        // For example:
        // console.log('The object "' + this.holderId + '" is ready');
        // this.options = params;
        // this.holder.style.backgroundColor = this.options.color;
        // this.holder.innerHTML = 'Hello World!';
    }

    /**
     * Respond to messages sent by either this.broadcastMessage() or 
     * this.postMessage(). It's used for intra widget communication.
     * Normally, the sender would broadcasting a message to find the ID
     * of widgets that will later accept direct communication via
     * postMessage(). There is no pattern enforced on how to structure 
     * the messages exchanged between widgets.
     * 
     * @param string message A text message, like "getOptions", sent via
     * postMessage() or broadcastMessage();
     * @param object data The message's data.
     * @param string type The type of message received: 'broadcast' or 'direct'.
     * @return object Some return value for the caller of this.postMessage().
     */
    onMessage(message, data, type) {
        // For example:
        // if (type == 'broadcast') {
        //     if (message == 'getClassName')
        //         return this.className;    // call the inherited method
        //     if (message == 'getOptions')
        //         return {...this.options}; // a clone of the params passed to render()
        // }
        // else if (type == 'direct') {
        //     if (message == 'hide')
        //         this.holder.style.display = 'none';
        // }
    }
}